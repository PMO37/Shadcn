{
  "name": "slider",
  "dependencies": [
    "@radix-ui/react-slider"
  ],
  "files": [
    {
      "name": "slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface SliderProps extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n  showSteps?: string;\n  formatLabel?: (value: number) => string;\n  formatLabelSide?: string;\n}\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  SliderProps\n>(({ className, showSteps = 'none', formatLabel, formatLabelSide = 'top', ...props }, ref) => {\n  const { min = 0, max = 100, step = 1, orientation, value, defaultValue, onValueChange } = props;\n  const [hoveredThumbIndex, setHoveredThumbIndex] = React.useState<boolean>(false);\n  const numberOfSteps = Math.floor((max - min) / step);\n  const stepLines = Array.from({ length: numberOfSteps }, (_, index) => index * step + min);\n\n  const initialValue = Array.isArray(value) ? value : (Array.isArray(defaultValue) ? defaultValue : [min, max]);\n  const [localValues, setLocalValues] = React.useState<number[]>(initialValue);\n\n  React.useEffect(() => {\n    if (!isEqual(value, localValues)) {\n      setLocalValues(Array.isArray(value) ? value : (Array.isArray(defaultValue) ? defaultValue : [min, max]));\n    }\n  }, [min, max, value]);\n\n  const handleValueChange = (newValues: number[]) => {\n    setLocalValues(newValues);\n    if (onValueChange) {\n      onValueChange(newValues);\n    }\n  };\n\n  function isEqual(array1: number[] | undefined, array2: number[] | undefined) {\n    array1 = array1 ?? [];\n    array2 = array2 ?? [];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return (\n    <SliderPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"relative flex touch-none select-none cursor-pointer data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        \"data-[orientation='horizontal']:w-full data-[orientation='horizontal']:items-center\",\n        \"data-[orientation='vertical']:h-full data-[orientation='vertical']:justify-center\",\n        className\n      )}\n      min={min}\n      max={max}\n      step={step}\n      value={localValues}\n      onValueChange={(value) => handleValueChange(value)}\n      {...props}\n      onFocus={() => setHoveredThumbIndex(true)}\n      onBlur={() => setHoveredThumbIndex(false)}\n    >\n      <SliderPrimitive.Track className={cn(\n        \"relative grow overflow-hidden rounded-full bg-secondary\",\n        \"data-[orientation='horizontal']:h-2 data-[orientation='horizontal']:w-full\",\n        \"data-[orientation='vertical']:h-full data-[orientation='vertical']:w-2\"\n      )}>\n        <SliderPrimitive.Range className={cn(\n          \"absolute bg-primary\",\n          \"data-[orientation='horizontal']:h-full\",\n          \"data-[orientation='vertical']:w-full\"\n        )} />\n        {showSteps !== undefined && showSteps !== 'none' && stepLines.map((value, index) => {\n          if (value === min || value === max) {\n            return null;\n          }\n          const positionPercentage = ((value - min) / (max - min)) * 100;\n          const adjustedPosition = 50 + (positionPercentage - 50) * 0.96;\n          return (\n            <div\n              key={index}\n              className={cn(\n                {'w-0.5 h-2': orientation !== 'vertical', 'w-2 h-0.5': orientation === 'vertical'},\n                'absolute bg-muted-foreground',\n                {\n                  'left-1': orientation === 'vertical' && showSteps === 'half',\n                  'top-1': orientation !== 'vertical' && showSteps === 'half',\n                  'left-0': orientation === 'vertical' && showSteps === 'full',\n                  'top-0': orientation !== 'vertical' && showSteps === 'full',\n                  'transform -translate-x-1/2': orientation !== 'vertical',\n                  'transform -translate-y-1/2': orientation === 'vertical',\n                }\n              )}\n              style={{\n                [orientation === 'vertical' ? 'bottom' : 'left']: `${adjustedPosition}%`\n              }}\n            />\n          );\n        })}\n\n      </SliderPrimitive.Track>\n      {localValues.map((numberStep, index) => (\n        <SliderPrimitive.Thumb\n          key={index}\n          className={cn(\n            \"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n          )}>\n          {hoveredThumbIndex && formatLabel && (\n            <div\n              className={cn(\n                {'bottom-8 left-1/2 transform -translate-x-1/2': formatLabelSide === 'top'},\n                {'top-8 left-1/2 transform -translate-x-1/2': formatLabelSide === 'bottom'},\n                {'right-8 transform -translate-y-1/4': formatLabelSide === 'left'},\n                {'left-8 transform -translate-y-1/4': formatLabelSide === 'right'},\n                \"absolute z-30 rounded-md border bg-popover text-popover-foreground shadow-sm px-2 text-center items-center justify-items-center w-max py-1\",\n              )}\n            >\n              {formatLabel(numberStep)}\n            </div>\n          )}\n        </SliderPrimitive.Thumb>\n      ))}\n    </SliderPrimitive.Root>\n  )\n})\n\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
    }
  ],
  "type": "components:ui"
}